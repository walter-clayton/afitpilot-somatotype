import React, { useEffect } from "react";
import { Box, Grid, Typography, useTheme, useMediaQuery } from "@mui/material";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  ChartOptions,
  ChartData,
} from "chart.js";
import { ExerciseFormState } from "../FormModal/UtilTypes";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

interface Dataset {
  label: string;
  data: number[];
  borderColor: string;
  backgroundColor: string;
  tension: number;
  fill: boolean;
  unitType: string;
}

interface CustomChartOptions extends ChartOptions<"line"> {
  height?: number;
}

const createDataset = (
  label: string,
  data: number[],
  borderColor: string,
  unitType: string
): Dataset => ({
  label,
  data,
  borderColor,
  backgroundColor: borderColor,
  tension: 0.4,
  fill: false,
  unitType,
});

const options: CustomChartOptions = {
  responsive: true,
  maintainAspectRatio: false,
  plugins: {
    legend: {
      position: "top",
      display: false,
    },
    title: {
      display: false,
      text: "",
    },
  },
  height: 370,
};

const ChartContainer: React.FC<{
  filteredExercises: ExerciseFormState[];
  lastExercise: ExerciseFormState | undefined;
}> = ({ filteredExercises }) => {
  const theme = useTheme();
  const isSmallScreen = useMediaQuery(theme.breakpoints.down("sm"));

  const calculateAdjustedPerformance = (
    actualRPE: number,
    intendedScore: number
  ): number => {
    let adjustmentFactor = 1 - (actualRPE - 4) / 10;
    adjustmentFactor = Math.max(adjustmentFactor, 0.9);

    const adjustedScore = intendedScore * adjustmentFactor;

    // Round the adjusted score to the nearest whole number
    return Math.round(adjustedScore);
  };
  useEffect(() => {
    // console.log("Exercises in ChartContainer:", filteredExercises);
  }, [filteredExercises]);

  const optionsWithoutGrid: ChartOptions<"line"> = {
    ...options,
    scales: {
      x: {
        display: true,
        grid: {
          display: false,
        },
      },
      y: {
        display: true,
        grid: {
          display: false,
        },
      },
    },
  };

  const dates: string[] = filteredExercises.map((exercise) => exercise.date);
  const labels: string[] = dates.slice(0, 500);

  const prescribedRPE: (number | undefined)[] = filteredExercises.map(
    (exercise) => exercise.prescribedRPE
  );

  const filteredPrescribedRPE: number[] = prescribedRPE.filter(
    (value): value is number => value !== undefined
  );

  const prescribedPerformance: (number | undefined)[] = filteredExercises.map(
    (exercise) => {
      if (typeof exercise.intendedScore === "string") {
        return parseInt(exercise.intendedScore);
      } else if (typeof exercise.intendedScore === "number") {
        return exercise.intendedScore;
      } else {
        return undefined;
      }
    }
  );

  const filteredPrescribedPerformance: number[] = prescribedPerformance.filter(
    (value): value is number => value !== undefined
  );

  // Calculate adjusted performance
  const adjustedPerformance: number[] = filteredPrescribedRPE.map(
    (prescribedRPE, index) => {
      return calculateAdjustedPerformance(
        prescribedRPE,
        filteredPrescribedPerformance[index]
      );
    }
  );

  // Return null if there are no filtered exercises
  if (filteredExercises.length === 0) {
    return null;
  }

  const rpeChartData: ChartData<"line"> = {
    labels,
    datasets: [
      createDataset("Prescribed RPE", filteredPrescribedRPE, "#56A278", ""),
      createDataset("Actual RPE", filteredPrescribedRPE, "#9B361A", ""),
    ],
  };

  const unitType =
    filteredExercises.length > 0 ? filteredExercises[0].unit : "";
  // Provide a default value if unitType is undefined
  const unitTypeString = unitType || "";

  const performanceChartData: ChartData<"line"> = {
    labels,
    datasets: [
      createDataset(
        "Prescribed Performance",
        filteredPrescribedPerformance,
        "#56A278",
        unitTypeString
      ),
      createDataset(
        "Adjusted Performance",
        adjustedPerformance,
        "#9B361A",
        unitTypeString
      ),
    ],
  };

  return (
    <Box
      sx={{
        mt: "20px",
        display: "flex",
        gap: "30px",
        height: "100%",
        flexDirection: isSmallScreen ? "column" : "row",
        flexWrap: "wrap",
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      {/* RPE scores chart */}
      <Grid
        item
        sx={{
          width: isSmallScreen ? "100vw" : "400px",
          flexDirection: "column",
          flexWrap: "wrap",
          // height: "100%",
          height: "380px",
          justifyContent: "center",
          alignItems: "center",
          borderRadius: "20px",
          mt: "15px",
          gap: "20px",
          backgroundColor: "#fff",
          pb: "50px",
          boxShadow: "0px 4px 6px rgba(0, 0, 0, 0.1)",
        }}
      >
        <Typography
          sx={{
            backgroundColor: "#F6F6F7",
            color: "#606161",
            fontWeight: "bold",
            display: "flex",
            justifyContent: "center",
            width: "100%",
            padding: "12px",
            borderTopLeftRadius: "20px",
            borderTopRightRadius: "20px",
          }}
        >
          RPE scores
        </Typography>

        {/* RPE scores chart to display */}
        <Line
          options={optionsWithoutGrid}
          data={rpeChartData}
          style={{
            padding: "10px",
            width: "100%",
          }}
        />
      </Grid>

      {/* Exercise scores*/}
      <Grid
        item
        sx={{
          width: isSmallScreen ? "100vw" : "400px",
          flexDirection: "column",
          justifyContent: "center",
          height: "380px",
          objectFit: "contain",
          alignItems: "center",
          borderRadius: "20px",
          gap: "20px",
          backgroundColor: "#fff",
          pb: "50px",
          boxShadow: "0px 4px 6px rgba(0, 0, 0, 0.1)",
        }}
      >
        <Typography
          sx={{
            backgroundColor: "#F6F6F7",
            color: "#606161",
            fontWeight: "bold",
            display: "flex",
            justifyContent: "center",
            width: "100%",
            padding: "12px",
            borderTopLeftRadius: "20px",
            borderTopRightRadius: "20px",
          }}
        >
          Exercise scores
        </Typography>

        {/* Exercise scores chart to display */}
        <Line
          options={optionsWithoutGrid}
          data={performanceChartData}
          style={{
            padding: "10px",
            width: "100%",
          }}
        />
      </Grid>
    </Box>
  );
};

export default ChartContainer;
